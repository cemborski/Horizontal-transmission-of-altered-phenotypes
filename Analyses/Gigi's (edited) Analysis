---
title: "16s rRNA HiSeq Analysis"
author: "Carmen Emborski"
date: "1/6/2019"
output: html_document
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
library(knitr)
library(kableExtra)
library(gridExtra)
library(scales)
library(RColorBrewer)
library(tidyverse) #dplyr package included
library(stringr)
library(lme4)
library(nlme)
library(effects)
library(DESeq2)
library(qiime2R)
library(phyloseq)
library(DivNet)
library(vegan)
library(sjPlot) #  mixed effects table summary
library(ggplot2)
library(devtools)
theme_set(theme_minimal() + theme(legend.position = "bottom", axis.title =  element_text(size = 20), axis.text =  element_text(size = 10), strip.text = element_text(size = 20)))
#theme_set(theme_bw())
```

##Import Files
1) metadata file (provides 16s sample details (i.e. treatment, generations)) 
2) feature table (this is the sequencing output file after qiime processing)
3) taxonomy file (gives taxanomic names to unique amplicon sequence variants)
4) tree (helps construct the phylogenetic tree)
```{r}
taxonomy<- read.delim("https://raw.githubusercontent.com/cemborski/Horizontal-transmission-of-altered-phenotypes/master/16s%20rRNA%20HiSeq%20Analysis/Taxonomy.tsv")
names(taxonomy) <- c("row", "tax", "Confidence")
row.names(taxonomy) <-taxonomy[[1]]
taxonomy <- taxonomy[,(-1)]
taxonomy <-  separate(taxonomy, tax, c("D0","D1", "D2", "D3", "D4", "D5", "D6", "D7", "D8", "D9", "D10", "D11", "D12", "D13", "D14"), sep = ";", fill = "right")
taxonomy <- taxonomy[,c(1:6)]
taxmat <- as.matrix(taxonomy)
TAX = tax_table(taxmat) 

#import metadata
metatable <- read.delim("https://raw.githubusercontent.com/cemborski/Horizontal-transmission-of-altered-phenotypes/master/16s%20rRNA%20HiSeq%20Analysis/Metatable.txt")
row.names(metatable) <- metatable[[1]]
metatable<- metatable[,(-1)]
META <- sample_data(metatable)

#Import Phylogenetic tree (rooted, exported from qiime2)
TREE <- read_tree("https://raw.githubusercontent.com/cemborski/Horizontal-transmission-of-altered-phenotypes/master/16s%20rRNA%20HiSeq%20Analysis/tree.nwk")

#Import feature (sequence variant) table
Svtab <- read.delim("https://raw.githubusercontent.com/cemborski/Horizontal-transmission-of-altered-phenotypes/master/16s%20rRNA%20HiSeq%20Analysis/FeatureTable.txt")
row.names(Svtab)<-Svtab[[1]] #make OTU ID the row names
Svtab<-Svtab[,-(1)] # remove OTU ID column
fmat <- as.matrix(Svtab)
OTU = otu_table(fmat, taxa_are_rows = TRUE)

#create phyloseq object
ps <- phyloseq(OTU, TAX, META, TREE)
```

##Preprocessing and Filtering:
###Visualize data with minimal filtering: NAs removed (0% filtered)
```{r pressure, echo=FALSE}
ps0 = subset_taxa(ps, D0=="D_0__Bacteria")
ps0 <- subset_taxa(ps0, D5!="NA") #remove NAs

prevdf = apply(X = otu_table(ps0),
               MARGIN = ifelse(taxa_are_rows(ps0), yes = 1, no = 2),
               FUN = function(x){sum(x > 0)})

prevdf = data.frame(Prevalence = prevdf,
                    TotalAbundance = taxa_sums(ps0),
                    tax_table(ps0))

###Plot 0% filtered data and visualize a 5% threshold (Family Level)
FilterPlot0 <- ggplot(prevdf, aes(TotalAbundance, Prevalence / nsamples(ps0),color=D4)) +
  geom_hline(yintercept = 0.05, alpha = 0.5, linetype = 2) +  
  geom_point(size = 2, alpha = 0.7) +
  scale_x_log10() +  
  xlab("Total Abundance") + ylab("Prevalence [Frac. Samples]") +
  facet_wrap(~D3) + theme(legend.position="none")
ggsave("FamilyLevelFilterPlot0.png", FilterPlot0, width = 20, height = 20, units = "in")
```
Compositional Plot (0% Filtered): Genus and Family Level (ps0)
```{r}
psmelt0 <- psmelt(ps0)
abundantClasses <- psmelt0 %>% group_by(D5) %>% summarize(frac = n() / nrow(.)) %>% filter(frac > 0.01) %>% na.omit() %>% pull(D5)
#https://personal.sron.nl/~pault/data/colourschemes.pdf
#mycolsBright <- c( "Acetobacter" = "#4477AA", "Acinetobacter" = "#66CCEE",  "Lactobacillus" = "#228833"  , "Pseudomonas" = "#CCBB44",     "Staphylococcus" = "#EE6677")
psmelt0 %>% filter(D5 %in% abundantClasses) %>% ggplot(aes_string(x = "Generation", y = "Abundance", fill = "D5")) + geom_bar(stat = "identity", position = "fill") + theme(axis.text.x = element_text(angle = 0, hjust = 0), legend.text=element_text(size=rel(1)), legend.title=element_blank()) + scale_y_sqrt() + ylab(expression(sqrt("Fraction of community"))) + xlab("Generation") + facet_grid(SampleType~Treatment, scales="free")
ggsave("Genus Level Barplot (unfiltered).pdf", height = 7, width = 12)

psmelt0 <- psmelt(ps0)
abundantClasses <- psmelt0 %>% group_by(D4) %>% summarize(frac = n() / nrow(.)) %>% filter(frac > 0.01) %>% na.omit() %>% pull(D4)
#https://personal.sron.nl/~pault/data/colourschemes.pdf
#mycolsBright <- c( "Acetobacter" = "#4477AA", "Acinetobacter" = "#66CCEE",  "Lactobacillus" = "#228833"  , "Pseudomonas" = "#CCBB44",     "Staphylococcus" = "#EE6677")
psmelt0 %>% filter(D4 %in% abundantClasses) %>% ggplot(aes_string(x = "Generation", y = "Abundance", fill = "D4")) + geom_bar(stat = "identity", position = "fill") + theme(axis.text.x = element_text(angle = 0, hjust = 0), legend.text=element_text(size=rel(1)), legend.title=element_blank()) + scale_y_sqrt() + ylab(expression(sqrt("Fraction of community"))) + xlab("Generation") + facet_grid(SampleType~Treatment, scales="free")
ggsave("Family Level Barplot (ufiltered).pdf", height = 7, width = 12)
```

###Filtering Out Rare Artifacts (Sasha/Maggi's Filter, ps)
```{r}
#Filter Data
#0% THRESHOLD
rank_names(ps)
ps <- subset_taxa(ps, D0=="D_0__Bacteria") #keep only bacterial ASVs
table(tax_table(ps)[, "D0"], exclude = NULL)
ps = subset_taxa(ps, D1!="NA") #remove NAs


# function to remove rare artifactual taxa, where thresh is the fraction of samples that must have these OTUs
filterTaxa <- function(ps, thresh) {
  table(tax_table(ps)[, "D0"], exclude = NULL) # remove sequences that have D0 unassigned
  ps <- subset_taxa(ps, D0=="D_0__Bacteria") # Filter Physeq object - Bacteria ONLY
  table(tax_table(ps)[, "D2"], exclude = NULL)
  ps = subset_taxa(ps, !D2 %in% c("D_2__Chloroplast" , " D_2__Cyanobacteria")) #remove phyla that cannot be part of microbiome

  prevdf = apply(X = otu_table(ps),
                 MARGIN = ifelse(taxa_are_rows(ps), yes = 1, no = 2),
                 FUN = function(x){sum(x > 0)})

  prevdf = data.frame(Prevalence = prevdf,
                      TotalAbundance = taxa_sums(ps),
                      tax_table(ps))

  plyr::ddply(prevdf, "D2", function(df1){cbind(mean(df1$Prevalence),sum(df1$Prevalence))})

  prevdf1.plot <- ggplot(prevdf, aes(TotalAbundance, Prevalence / nsamples(ps),color=D2)) +
    # Include a guess for parameter
    geom_hline(yintercept = 0.01, alpha = 0.5, linetype = 2) +  geom_point(size = 2, alpha = 0.7) +
    scale_x_log10() +  xlab("Total Abundance") + ylab("Prevalence [Frac. Samples]") +
    facet_wrap(~D2) + theme(legend.position="none")

  prevalenceThreshold = thresh * nsamples(ps) # remove OTS found in less than thres% of the samples

  keepTaxa = rownames(prevdf)[(prevdf$Prevalence >= prevalenceThreshold)]
  ps2 = prune_taxa(keepTaxa, ps)

  table(tax_table(ps2)[, "D2"], exclude = NULL)

  prevdf2 = apply(X = otu_table(ps2),
                 MARGIN = ifelse(taxa_are_rows(ps2), yes = 1, no = 2),
                 FUN = function(x){sum(x > 0)})

  prevdf2 = data.frame(Prevalence = prevdf2,
                      TotalAbundance = taxa_sums(ps2),
                      tax_table(ps2))

  plyr::ddply(prevdf2, "D1", function(df1){cbind(mean(df1$Prevalence),sum(df1$Prevalence))})

  #transform to relative abundance
  ps2ra = transform_sample_counts(ps2, function(x){x / sum(x)})

  ##################################
  #Remove all taxa that are D1 == NA

  psF = subset_taxa(ps2, D1 %in% c("D_1__Acidobacteria", "D_1__Actinobacteria", "D_1__Bacteroidetes", "D_1__Firmicutes", " D_1__Parcubacteria", "D_1__Proteobacteria", "D_1__Verrucomicrobia"))
  table(tax_table(psF)[, "D1"], exclude = NULL)

  #Final Prevalence Plot
  prevdf3 = apply(X = otu_table(psF),
                  MARGIN = ifelse(taxa_are_rows(psF), yes = 1, no = 2),
                  FUN = function(x){sum(x > 0)})

  prevdf3 = data.frame(Prevalence = prevdf3,
                       TotalAbundance = taxa_sums(psF),
                       tax_table(psF))

  plyr::ddply(prevdf3, "D1", function(df1){cbind(mean(df1$Prevalence),sum(df1$Prevalence))})

  ggplot(prevdf3, aes(TotalAbundance, Prevalence / nsamples(ps),color=D2)) +
    # Include a guess for parameter
    geom_hline(yintercept = 0.01, alpha = 0.5, linetype = 2) +  geom_point(size = 2, alpha = 0.7) +
    scale_x_log10() +  xlab("Total Abundance") + ylab("Prevalence [Frac. Samples]") +
    facet_wrap(~D2) + theme(legend.position="none")
  return(psF)
}
```


###Apply 5% filtering and revisualize (ps5):
```{r}
prevalenceThreshold = 0.05 * nsamples(ps0)
keepTaxa = rownames(prevdf)[(prevdf$Prevalence >= prevalenceThreshold)]
ps5 = prune_taxa(keepTaxa, ps0)

prevdf5 = apply(X = otu_table(ps5),
               MARGIN = ifelse(taxa_are_rows(ps5), yes = 1, no = 2),
               FUN = function(x){sum(x > 0)})

prevdf5 = data.frame(Prevalence = prevdf5,
                    TotalAbundance = taxa_sums(ps5),
                    tax_table(ps5))

#Visualize after 5% filtering:
FilterPlot5 <- ggplot(prevdf5, aes(TotalAbundance, Prevalence / nsamples(ps5),color=D4)) +
  geom_hline(yintercept = 0.05, alpha = 0.5, linetype = 2) +  
  geom_point(size = 2, alpha = 0.7) +
  scale_x_log10() +  
  xlab("Total Abundance") + ylab("Prevalence [Frac. Samples]") +
  facet_wrap(~D3) + theme(legend.position="none")
ggsave("FilterPlot5.png", FilterPlot5, width = 20, height = 20, units = "in")
```
Compositional Plot: Family and Genus Level
```{r}
psmelt5 <- psmelt(ps5)
abundantClasses <- psmelt5 %>% group_by(D5) %>% summarize(frac = n() / nrow(.)) %>% filter(frac > 0.01) %>% na.omit() %>% pull(D5)
#https://personal.sron.nl/~pault/data/colourschemes.pdf
#mycolsBright <- c( "Acetobacter" = "#4477AA", "Acinetobacter" = "#66CCEE",  "Lactobacillus" = "#228833"  , "Pseudomonas" = "#CCBB44",     "Staphylococcus" = "#EE6677")
psmelt5 %>% filter(D5 %in% abundantClasses) %>% ggplot(aes_string(x = "Generation", y = "Abundance", fill = "D5")) + geom_bar(stat = "identity", position = "fill") + theme(axis.text.x = element_text(angle = 0, hjust = 0), legend.text=element_text(size=rel(1)), legend.title=element_blank()) + scale_y_sqrt() + ylab(expression(sqrt("Fraction of community"))) + xlab("Generation") + facet_grid(SampleType~Treatment, scales="free")
ggsave("Genus Level Barplot (5).pdf", height = 7, width = 12)

psmelt5 <- psmelt(ps5)
abundantClasses <- psmelt5 %>% group_by(D4) %>% summarize(frac = n() / nrow(.)) %>% filter(frac > 0.01) %>% na.omit() %>% pull(D4)
#https://personal.sron.nl/~pault/data/colourschemes.pdf
#mycolsBright <- c( "Acetobacter" = "#4477AA", "Acinetobacter" = "#66CCEE",  "Lactobacillus" = "#228833"  , "Pseudomonas" = "#CCBB44",     "Staphylococcus" = "#EE6677")
psmelt5 %>% filter(D4 %in% abundantClasses) %>% ggplot(aes_string(x = "Generation", y = "Abundance", fill = "D4")) + geom_bar(stat = "identity", position = "fill") + theme(axis.text.x = element_text(angle = 0, hjust = 0), legend.text=element_text(size=rel(1)), legend.title=element_blank()) + scale_y_sqrt() + ylab(expression(sqrt("Fraction of community"))) + xlab("Generation") + facet_grid(SampleType~Treatment, scales="free")
ggsave("Family Level Barplot (5).pdf", height = 7, width = 12)
```

###Apply the 20% filtering and revisualize (ps20):
```{r}
prevalenceThreshold = 0.2 * nsamples(ps0)
keepTaxa = rownames(prevdf)[(prevdf$Prevalence >= prevalenceThreshold)]
ps20 = prune_taxa(keepTaxa, ps0)

prevdf20 = apply(X = otu_table(ps20),
               MARGIN = ifelse(taxa_are_rows(ps20), yes = 1, no = 2),
               FUN = function(x){sum(x > 0)})

prevdf20 = data.frame(Prevalence = prevdf20,
                    TotalAbundance = taxa_sums(ps20),
                    tax_table(ps20))

#Visualize after 20% filtering:
FilterPlot20 <- ggplot(prevdf20, aes(TotalAbundance, Prevalence / nsamples(ps20),color=D4)) +
  geom_hline(yintercept = 0.05, alpha = 0.5, linetype = 2) +  
  geom_point(size = 2, alpha = 0.7) +
  scale_x_log10() +  
  xlab("Total Abundance") + ylab("Prevalence [Frac. Samples]") +
  facet_wrap(~D3) + theme(legend.position="none")
ggsave("FilterPlot20.png", FilterPlot5, width = 20, height = 20, units = "in")
```
Compositional Plot (20%): Genus and Family Levels
```{r}
psmelt20 <- psmelt(ps20)
abundantClasses <- psmelt20 %>% group_by(D5) %>% summarize(frac = n() / nrow(.)) %>% filter(frac > 0.01) %>% na.omit() %>% pull(D5)
#https://personal.sron.nl/~pault/data/colourschemes.pdf
#mycolsBright <- c( "Acetobacter" = "#4477AA", "Acinetobacter" = "#66CCEE",  "Lactobacillus" = "#228833"  , "Pseudomonas" = "#CCBB44",     "Staphylococcus" = "#EE6677")
psmelt20 %>% filter(D5 %in% abundantClasses) %>% ggplot(aes_string(x = "Generation", y = "Abundance", fill = "D5")) + geom_bar(stat = "identity", position = "fill") + theme(axis.text.x = element_text(angle = 0, hjust = 0), legend.text=element_text(size=rel(1)), legend.title=element_blank()) + scale_y_sqrt() + ylab(expression(sqrt("Fraction of community"))) + xlab("Generation") + facet_grid(SampleType~Treatment, scales="free")
ggsave("Genus Level Barplot (20).pdf", height = 7, width = 12)

psmelt20 <- psmelt(ps20)
abundantClasses <- psmelt20 %>% group_by(D4) %>% summarize(frac = n() / nrow(.)) %>% filter(frac > 0.01) %>% na.omit() %>% pull(D4)
#https://personal.sron.nl/~pault/data/colourschemes.pdf
#mycolsBright <- c( "Acetobacter" = "#4477AA", "Acinetobacter" = "#66CCEE",  "Lactobacillus" = "#228833"  , "Pseudomonas" = "#CCBB44",     "Staphylococcus" = "#EE6677")
psmelt20 %>% filter(D4 %in% abundantClasses) %>% ggplot(aes_string(x = "Generation", y = "Abundance", fill = "D4")) + geom_bar(stat = "identity", position = "fill") + theme(axis.text.x = element_text(angle = 0, hjust = 0), legend.text=element_text(size=rel(1)), legend.title=element_blank()) + scale_y_sqrt() + ylab(expression(sqrt("Fraction of community"))) + xlab("Generation") + facet_grid(SampleType~Treatment, scales="free")
ggsave("Family Level Barplot (20).pdf", height = 7, width = 12)
```




##Alpha diversity (ps0, NAs filtered)
```{r divnetAll, cache=T, message = FALSE, warning = FALSE, results = 'hide'}
divnet_all.noNA <-  divnet(tax_glom(ps0, taxrank = "D5"), X = "TypeGenTreat")

metatable1.noNA <- read.delim("https://raw.githubusercontent.com/cemborski/Horizontal-transmission-of-altered-phenotypes/master/16s%20rRNA%20HiSeq%20Analysis/Metatable.txt")
colnames(metatable1.noNA)[1] <- "sample_names"

divnet_summary <- divnet_all.noNA$shannon %>% summary %>% left_join(metatable1.noNA) %>% group_by(TypeGenTreat) %>% summarize(alpha = estimate[1], lower = lower[1], upper = upper[1], SampleType = SampleType[1], Generation = Generation[1], Treatment = Treatment[1]) 
divnet_summary %>% ggplot(aes(Treatment, alpha, color = Treatment)) + geom_point() + geom_linerange(aes(ymin = lower, ymax = upper)) + facet_grid(Generation~Treatment, scales = "free") + theme_minimal() + theme(axis.text.x=element_blank()) + xlab("Treatment") + guides(color = F)
ggsave("Alpha Diversity (NAs removed only).pdf", height = 10, width = 7)


```

##Alpha diversity (ps, rare artifacts filtered)
```{r divnetAll, cache=T, message = FALSE, warning = FALSE, results = 'hide'}
divnet_all.noRA <-  divnet(tax_glom(ps, taxrank = "D5"), X = "TypeGenTreat")

metatable1.noRA <- read.delim("https://raw.githubusercontent.com/cemborski/Horizontal-transmission-of-altered-phenotypes/master/16s%20rRNA%20HiSeq%20Analysis/Metatable.txt")
colnames(metatable1.noRA)[1] <- "sample_names"

divnet_summary <- divnet_all.noRA$shannon %>% summary %>% left_join(metatable1.noRA) %>% group_by(TypeGenTreat) %>% summarize(alpha = estimate[1], lower = lower[1], upper = upper[1], SampleType = SampleType[1], Generation = Generation[1], Treatment = Treatment[1]) 
divnet_summary %>% ggplot(aes(Treatment, alpha, color = Treatment)) + geom_point() + geom_linerange(aes(ymin = lower, ymax = upper)) + facet_grid(Generation~Treatment, scales = "free") + theme_minimal() + theme(axis.text.x=element_blank()) + xlab("Treatment") + guides(color = F)
ggsave("Alpha Diversity (no RA).pdf", height = 10, width = 7)


```

##Alpha diversity (ps5, 5% prevalence filtered)
```{r divnetAll, cache=T, message = FALSE, warning = FALSE, results = 'hide'}
divnet_all.5 <-  divnet(tax_glom(ps5, taxrank = "D5"), X = "TypeGenTreat")

metatable2.5 <- read.delim("https://raw.githubusercontent.com/cemborski/Horizontal-transmission-of-altered-phenotypes/master/16s%20rRNA%20HiSeq%20Analysis/Metatable.txt")
colnames(metatable2.5)[1] <- "sample_names"

divnet_summary <- divnet_all.5$shannon %>% summary %>% left_join(metatable2.5) %>% group_by(TypeGenTreat) %>% summarize(alpha = estimate[1], lower = lower[1], upper = upper[1], SampleType = SampleType[1], Generation = Generation[1], Treatment = Treatment[1]) 
divnet_summary %>% ggplot(aes(Treatment, alpha, color = Treatment)) + geom_point() + geom_linerange(aes(ymin = lower, ymax = upper)) + facet_grid(Generation~Treatment, scales = "free") + theme_minimal() + theme(axis.text.x=element_blank()) + xlab("Treatment") + guides(color = F)
ggsave("Alpha Diversity 5perc.pdf", height = 10, width = 7)


```


##Alpha diversity (ps20, 20% prevalence filtered)
```{r divnetAll, cache=T, message = FALSE, warning = FALSE, results = 'hide'}
divnet_all.20 <-  divnet(tax_glom(ps20, taxrank = "D5"), X = "TypeGenTreat")

metatable3 <- read.delim("https://raw.githubusercontent.com/cemborski/Horizontal-transmission-of-altered-phenotypes/master/16s%20rRNA%20HiSeq%20Analysis/Metatable.txt")
colnames(metatable3)[1] <- "sample_names"

divnet_summary <- divnet_all.20$shannon %>% summary %>% left_join(metatable3) %>% group_by(TypeGenTreat) %>% summarize(alpha = estimate[1], lower = lower[1], upper = upper[1], SampleType = SampleType[1], Generation = Generation[1], Treatment = Treatment[1]) 
divnet_summary %>% ggplot(aes(Treatment, alpha, color = Treatment)) + geom_point() + geom_linerange(aes(ymin = lower, ymax = upper)) + facet_grid(Generation~Treatment, scales = "free") + theme_minimal() + theme(axis.text.x=element_blank()) + xlab("Treatment") + guides(color = F)
ggsave("Alpha Diversity 20perc.pdf", height = 10, width = 7)

```



## Examining microbial community differentiation (ps0, NAs filtered)
```{r adonis}
d = UniFrac(tax_glom(ps0, taxrank = "D5"))
d.mds <- metaMDS(d, zerodist=ignore, trymax=100) #vegan package
Viscrs <- cbind(META, data.frame(MDS1 = d.mds$points[,1], MDS2 = d.mds$points[,2])) 
cent <- cbind(META, data.frame(MDS1 = d.mds$points[,1], MDS2 = d.mds$points[,2])) %>% aggregate(cbind(MDS1, MDS2) ~ Treatment + Generation + SampleType, data = ., FUN = mean) 
segs <- merge(scrs, setNames(cent, c('Treatment', 'Generation','SampleType' ,'oNMDS1','oNMDS2')),
              by = c('Treatment', 'Generation', 'SampleType'), sort = FALSE)

ByGenerationUnifrac.plot <- ggplot(scrs, aes(x = MDS1, y = MDS2, shape = SampleType, color = factor(Treatment))) +
  facet_wrap(~Generation) + scale_colour_brewer(palette = "YlOrRd") + 
  geom_segment(data = segs,
               mapping = aes(xend = oNMDS1, yend = oNMDS2)) + # spiders
  geom_point(data = cent, size = 3) +                         # centroids
  geom_point() +                                              # sample scores
  coord_fixed()                                               # same axis scaling
ByGenerationUnifrac.plot
ggsave("ByGenerationUnifrac.pdf", height = 7, width = 7)

(microbes.adonis <- adonis2(d ~ Treatment * Generation * SampleType, as(sample_data(ps0), "data.frame"), permutations = 10000, strata = line))
anova(betadisper(d, sample_data(ps0)$Treatment))
plot(betadisper(d, sample_data(ps0)$Treatment))
microbes.adonis
```


## Examining microbial community differentiation (ps20, 20% filtered)
```{r adonis}
d = UniFrac(tax_glom(ps20, taxrank = "D5"))
d.mds <- metaMDS(d, zerodist=ignore, trymax=100) #vegan package
Viscrs <- cbind(META, data.frame(MDS1 = d.mds$points[,1], MDS2 = d.mds$points[,2])) 
cent <- cbind(META, data.frame(MDS1 = d.mds$points[,1], MDS2 = d.mds$points[,2])) %>% aggregate(cbind(MDS1, MDS2) ~ Treatment + Generation + SampleType, data = ., FUN = mean) 
segs <- merge(scrs, setNames(cent, c('Treatment', 'Generation','SampleType' ,'oNMDS1','oNMDS2')),
              by = c('Treatment', 'Generation', 'SampleType'), sort = FALSE)

ByGenerationUnifrac.plot <- ggplot(scrs, aes(x = MDS1, y = MDS2, shape = SampleType, color = factor(Treatment))) +
  facet_wrap(~Generation) + scale_colour_brewer(palette = "YlOrRd") + 
  geom_segment(data = segs,
               mapping = aes(xend = oNMDS1, yend = oNMDS2)) + # spiders
  geom_point(data = cent, size = 3) +                         # centroids
  geom_point() +                                              # sample scores
  coord_fixed()                                               # same axis scaling
ByGenerationUnifrac.plot
ggsave("ByGenerationUnifrac.pdf", height = 7, width = 7)

(microbes.adonis <- adonis2(d ~ Treatment * Generation * SampleType, as(sample_data(ps0), "data.frame"), permutations = 10000, strata = line))
anova(betadisper(d, sample_data(ps0)$Treatment))
plot(betadisper(d, sample_data(ps0)$Treatment))
microbes.adonis
```











#Rest of Gigi's code not yet converted
Changes in OTU abundance
As a function of fly emergence time
```{r exmergence_time}
# microbedat.phyloseq.time <- phyloseq_to_deseq2(subset_samples(microbedat, diet == "hsd" & time > 0), ~ time + line)
# microbedat.phyloseq.time <- results(DESeq(microbedat.phyloseq.time, test="LRT", fitType="local", reduced = ~ line))
# head(microbedat.phyloseq.time[order(microbedat.phyloseq.time$pvalue),])
# microbedat.phyloseq.time <- phyloseq_to_deseq2(subset_samples(microbedat, diet == "nsd" & time > 0), ~ time + line)
# microbedat.phyloseq.time <- results(DESeq(microbedat.phyloseq.time, test="LRT", fitType="local", reduced = ~ line))
# head(microbedat.phyloseq.time[order(microbedat.phyloseq.time$pvalue),])
```
No individual OTU is associated with fly emergence tim

As a function of round
```{r phyloseq_round}
# microbedat.phyloseq.round <- phyloseq_to_deseq2(tax_glom(subset_samples(microbedat, diet == "hsd"), taxrank = "Genus"), ~ round + line)
# microbedat.phyloseq.round <- results(DESeq(microbedat.phyloseq.round, test="LRT", fitType="local", reduced = ~  line))
# head(microbedat.phyloseq.round[order(microbedat.phyloseq.round$pvalue),])
# microbedat.phyloseq.round <- phyloseq_to_deseq2(tax_glom(subset_samples(microbedat, diet == "nsd"), taxrank = "Genus"), ~ round + line)
# microbedat.phyloseq.round <- results(DESeq(microbedat.phyloseq.round, test="LRT", fitType="local", reduced = ~  line))
# head(microbedat.phyloseq.round[order(microbedat.phyloseq.round$pvalue),])
# head(microbedat.phyloseq.round[order(microbedat.phyloseq.round$pvalue),])
```

Analyze for quantitative changes in individual species (ASVs)
```{r}
# psF <- filterTaxa(ps, 0.20) #abundance based filtering - keep only species present in 20% of samples
# ps01 <- subset_samples(psF, Generation %in% c("F0", "F1"))
# ddse01 <- phyloseq_to_deseq2(ps01, ~ GenTreat)
# ddse01 <- estimateSizeFactors(ddse01)
# idx <- rowSums(counts(ddse01, normalized=TRUE) >= 5 ) >= 5 # additional abundance-based filtering, must have more than five counts in more than five samples in the design
# ddse01.2 <- DESeq(ddse01[idx,], test="Wald", fitType="local", betaPrior=FALSE)
# resultsNames(ddse01.2)
# res0 <- results(ddse01.2, contrast=c("GenTreat","F0C","F0N"))
# table(res0$padj < 0.05)
# res0$species <- gsub("D_8__", "", tax_table(psF)[rownames(res0)])
# res0[res0$padj < 0.05,c("species", "log2FoldChange", "padj")]
# #Interestingly all F0 N ASVs that significantly differed from C were downregulated
# res1 <- results(ddse01.2, contrast=c("GenTreat","F1C","F1N"))
# table(res1$padj < 0.05)
# res1$species <- gsub("D_6__","", tax_table(psF)[rownames(res1)])
# res1[res1$padj < 0.05,c("species", "log2FoldChange", "padj")]
# res1vres0 <- res0[rownames(res1)[which(res1$padj<0.05)], c("species", "log2FoldChange", "padj")]
# res1vres0
# 
# #Interestingly, all F1 N ASVs that significantly differed from C were upregulated, and both species are found in F0
# 
# #Due to possible (study design) batch effects, F2/F3 were run in their own model
# psF23 <- subset_samples(psF, Generation %in% c("F2", "F3"))
# ddse23 <- phyloseq_to_deseq2(psF23, ~ GenTreat)
# ddse23 <- estimateSizeFactors(ddse23)
# idx <- rowSums(counts(ddse23, normalized=TRUE) >= 5 ) >= 5 # additional abundance-based filtering, must have more than five counts in more than five samples in the design
# ddse23.2 <- DESeq(ddse23[idx,], test="Wald", fitType="local", betaPrior=FALSE)
# res2 <- results(ddse23.2, contrast=c("GenTreat","F2C","F2N"))
# table(res2$padj < 0.05)
# res2$species <- gsub("D_5__", "", tax_table(psF)[rownames(res2)])
# res2[res2$padj < 0.05,c("species", "log2FoldChange", "padj")]
# res2vres0 <- res0[rownames(res2)[which(res2$padj<0.05)], c("species", "log2FoldChange", "padj")]
# #res2vres0
# #Although no similar significant ASVs were found between F0 and F2, there were 4 F2 N ASVs (species) that were downregulated relative to controls
# res3 <- results(ddse23.2, contrast=c("GenTreat","F3C","F3N"))
# table(res3$padj < 0.05)
# #No F3 N ASVs (species) significantly differed from controls
# #write.csv(res0, file = "res0.csv")
# #write.csv(res1, file = "res1.csv")
# #write.csv(res2, file = "res2.csv")
# #write.csv(res3, file = "res3.csv")
# # returns data frame of normalized counts for plotting from a deseq object and a table of results
# combineSig <- function(ddse01, res) {
#   sigtab <- res[which(res$padj < 0.05), ]
#   taxCounts <- list()
#   i <- 1
#   for (taxon in rownames(sigtab)) {
#     taxName <- as.data.frame(tax_table(ps01)[taxon])[,6]
#     tc <- plotCounts(ddse01.2, gene=taxon, intgroup="GenTreat",returnData=TRUE)
#     tc$species <- taxName
#     tc$code <- paste(taxon,taxName)
#     taxCounts[[i]] <- tc %>% separate(GenTreat, into = c("Gen", "Treat"), sep=2) %>% mutate(species = gsub("D_5__", "", species))
#     i <- i + 1
#   }
#   return(plyr::rbind.fill(taxCounts))
# }
# 
# 
# #PLOT F0/F1
# fig3a <- combineSig(ddse01.2, res1) %>% ggplot(aes(Treat,count,fill=Treat)) + geom_jitter(width=.1, pch=21, colour="black", size=1.75) + ggtitle("Horizontally Transmitted Bacteria") + xlab("Generations") + ylab("ASV count") + scale_fill_manual("Non-Antibiotic\nTreatment", values=c("#FF9966", "#33CCFF"))  + facet_grid(species~Gen)+scale_y_log10() + theme_bw() + theme(plot.title = element_text(hjust = 0.5))
# ggsave("fig3a.png", fig3a, width = 6, height = 5, units = "in")
# #Are any bacteria associated with TAGs?
# phenotypes <- read.csv("https://raw.githubusercontent.com/cemborski/Horizontal-transmission-of-altered-phenotypes/master/Phenotype%20Analysis/phenotype_data") %>% filter(!grepl("\\+", Treatment)) %>% mutate(Treatment = factor(Treatment, labels = c("C", "N"))) %>% left_join(psF@sam_data, ., by = c("Generation", "Treatment", "SampleNumber" = "Sample")) %>% mutate (TAGwt = TAG/Fat.Weight)
# psF@sam_data$TAGwt <- phenotypes$TAGwt
# psFMet <- subset_samples(psF,  Generation %in% c("F1", "F2", "F3"))
# ddseMet <- phyloseq_to_deseq2(psFMet, ~ TAGwt)
# ddseMet <- estimateSizeFactors(ddseMet)
# idx <- rowSums(counts(ddseMet, normalized=TRUE) >= 5 ) >= 5
# ddseMet2 <- DESeq(ddseMet[idx,], test="Wald", fitType="local", betaPrior=FALSE)
# resultsNames(ddseMet2)
# table(results(ddseMet2, name="TAGwt")$padj<0.05)
# (tagsig <- results(ddseMet2, name="TAGwt")[results(ddseMet2, name="TAGwt")$padj<0.05,])
# tax_table(psF)[rownames(tagsig),6]
# metCounts <- data.table::rbindlist(lapply(1:3, function(x) {  plotCounts(ddseMet, gene=rownames(tagsig)[x], intgroup="TAGwt",returnData=TRUE) %>% mutate(taxon = as.vector(gsub("D_5__","", tax_table(psF)[rownames(tagsig)[x],6])), Generation = colData(ddseMet2)$Generation, Treatment = colData(ddseMet2)$Treatment) }))
# TAGvASV.plot <- metCounts %>% ggplot(aes(count, TAGwt, color=Treatment, shape=Generation )) + geom_point() + scale_x_log10(limit=c(1,NA)) + facet_grid(taxon~.) + scale_color_manual("Treatment", values=c("#FF9966", "#33CCFF")) + ggtitle("Relationship between bacteria and phenotype") + xlab("Abundance") + ylab("Triglycerides/Fly Weight") + stat_smooth(method="lm",aes(group=0)) + theme_bw() + theme(plot.title = element_text(hjust = 0.5))
# ggsave("TAGvASVplot.png", TAGvASV.plot, width = 5, height = 5, units = "in")
# Figure3.plot <- grid.arrange(arrangeGrob(fig3a + theme(legend.position="none"), TAGvASV.plot, ncol=2))
# ggsave("Figure3.png", Figure3.plot, width = 10, height = 5, units = "in")

```
